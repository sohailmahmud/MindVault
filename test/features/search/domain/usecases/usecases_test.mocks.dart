// Mocks generated by Mockito 5.4.4 from annotations
// in mindvault/test/features/search/domain/usecases/usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mindvault/core/error/failures.dart' as _i5;
import 'package:mindvault/features/search/domain/entities/document.dart' as _i6;
import 'package:mindvault/features/search/domain/repositories/search_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRepository extends _i1.Mock implements _i3.SearchRepository {
  MockSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>> searchDocuments(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchDocuments,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Document>>(
          this,
          Invocation.method(
            #searchDocuments,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>> semanticSearch(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #semanticSearch,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Document>>(
          this,
          Invocation.method(
            #semanticSearch,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Document>> addDocument(
          _i6.Document? document) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDocument,
          [document],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Document>>.value(
            _FakeEither_0<_i5.Failure, _i6.Document>(
          this,
          Invocation.method(
            #addDocument,
            [document],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Document>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Document>> updateDocument(
          _i6.Document? document) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [document],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Document>>.value(
            _FakeEither_0<_i5.Failure, _i6.Document>(
          this,
          Invocation.method(
            #updateDocument,
            [document],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Document>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteDocument(
          int? documentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocument,
          [documentId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteDocument,
            [documentId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>> getAllDocuments() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDocuments,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Document>>(
          this,
          Invocation.method(
            #getAllDocuments,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Document?>> getDocumentById(
          int? documentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocumentById,
          [documentId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Document?>>.value(
            _FakeEither_0<_i5.Failure, _i6.Document?>(
          this,
          Invocation.method(
            #getDocumentById,
            [documentId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Document?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>
      getDocumentsByCategory(String? category) => (super.noSuchMethod(
            Invocation.method(
              #getDocumentsByCategory,
              [category],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Document>>(
              this,
              Invocation.method(
                #getDocumentsByCategory,
                [category],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>> getDocumentsByTags(
          List<String>? tags) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocumentsByTags,
          [tags],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Document>>(
          this,
          Invocation.method(
            #getDocumentsByTags,
            [tags],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>> searchWithFilters({
    String? query,
    String? category,
    List<String>? tags,
    DateTime? startDate,
    DateTime? endDate,
    String? sortBy = r'updatedAt',
    bool? ascending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWithFilters,
          [],
          {
            #query: query,
            #category: category,
            #tags: tags,
            #startDate: startDate,
            #endDate: endDate,
            #sortBy: sortBy,
            #ascending: ascending,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Document>>(
          this,
          Invocation.method(
            #searchWithFilters,
            [],
            {
              #query: query,
              #category: category,
              #tags: tags,
              #startDate: startDate,
              #endDate: endDate,
              #sortBy: sortBy,
              #ascending: ascending,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> getAllCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getAllCategories,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> getAllTags() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getAllTags,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> suggestCategories(
          String? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #suggestCategories,
          [input],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #suggestCategories,
            [input],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> suggestTags(
          String? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #suggestTags,
          [input],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #suggestTags,
            [input],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteMultipleDocuments(
          List<int>? documentIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMultipleDocuments,
          [documentIds],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteMultipleDocuments,
            [documentIds],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>
      updateMultipleDocuments(List<_i6.Document>? documents) =>
          (super.noSuchMethod(
            Invocation.method(
              #updateMultipleDocuments,
              [documents],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Document>>(
              this,
              Invocation.method(
                #updateMultipleDocuments,
                [documents],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Document>>>);
}
